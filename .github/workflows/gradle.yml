name: CI & CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# 해당 yml 내에서 사용할 key - value
env:
  PROJECT_NAME: gym
  BUCKET_NAME: real-gym-bucket
  CODE_DEPLOY_APP_NAME: gym-codedeploy
  DEPLOYMENT_GROUP_NAME: gym-codedeploy-group


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip

permissions:
  id-token: write
  contents: read

#name: 워크플로우의 이름을 지정합니다. 이 경우 "CI & CD"로 설정되어 있으므로 CI 및 CD 작업을 수행하는 워크플로우임을 나타냅니다.
#
#on: 이 워크플로우가 언제 실행될지를 지정하는 부분입니다. push 및 pull_request 이벤트를 트리거로 설정하고, branches를 사용하여 "Develop" 브랜치에서의 변경 사항만을 대상으로 설정하였습니다.
#
#env: 워크플로우에서 사용할 환경 변수를 정의합니다. 이 환경 변수들은 워크플로우 내에서 사용되며, 프로젝트 이름, 버킷 이름, CodeDeploy 애플리케이션 이름, 배포 그룹 이름 등을 설정합니다.
#
#jobs: 워크플로우가 포함하는 작업을 정의합니다. 이 경우 build 라는 하나의 작업을 정의하고 있습니다.
#
#runs-on: 작업이 실행될 실행 환경을 지정합니다. 이 경우 "ubuntu-latest"로 설정하여 최신 버전의 Ubuntu 환경에서 작업을 수행합니다.
#
#steps: 작업 내에서 실행할 단계들을 정의합니다.
#
#Checkout Code: 코드를 GitHub 리포지토리에서 가져오는 단계입니다. actions/checkout@v2 액션을 사용하여 수행됩니다.
#
#Set up Java: Java 환경을 설정하는 단계입니다. actions/setup-java@v2 액션을 사용하여 Java 11을 설정합니다.
#
#Create Application YAML: 애플리케이션 설정 파일인 application.yml을 생성하는 단계입니다. GitHub Secrets에 저장된 애플리케이션 설정 정보를 파일에 저장하고 있습니다.
#
#Grant execute permission for gradlew: Gradle 빌드 스크립트에 실행 권한을 부여하는 단계입니다.
#
#Build with Gradle: Gradle을 사용하여 애플리케이션을 빌드하는 단계입니다.
#
#Make Zip File: 빌드된 애플리케이션을 압축 파일로 만드는 단계입니다. $GITHUB_SHA 환경 변수를 사용하여 고유한 파일 이름을 생성합니다.
#
#Configure AWS credentials: AWS 인증 정보를 설정하는 단계입니다. aws-actions/configure-aws-credentials@v1 액션을 사용하여 AWS 액세스 키와 시크릿 액세스 키를 설정합니다.
#
#Upload to S3: 빌드된 애플리케이션 압축 파일을 AWS S3 버킷에 업로드하는 단계입니다.

#Code Deploy: AWS CodeDeploy를 사용하여 배포를 시작하는 단계입니다. aws deploy create-deployment 명령을 사용하여 CodeDeploy 배포를 생성합니다.